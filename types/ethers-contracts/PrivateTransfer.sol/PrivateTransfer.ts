/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface PrivateTransferInterface extends Interface {
    getFunction(nameOrSignature: "balanceCommitments" | "getBalanceCommitment" | "initializeBalance" | "isValidAsset" | "privateTransfer" | "registerAsset" | "validAssets" | "verifier"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "AssetRegistered" | "BalanceCommitmentUpdated" | "TransferExecuted"): EventFragment;

    encodeFunctionData(functionFragment: 'balanceCommitments', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'getBalanceCommitment', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'initializeBalance', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'isValidAsset', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'privateTransfer', values: [[BigNumberish, BigNumberish], [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]], [BigNumberish, BigNumberish], [BigNumberish, BigNumberish, BigNumberish, BigNumberish], AddressLike]): string;
encodeFunctionData(functionFragment: 'registerAsset', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'validAssets', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'verifier', values?: undefined): string;

    decodeFunctionResult(functionFragment: 'balanceCommitments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getBalanceCommitment', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'initializeBalance', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'isValidAsset', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'privateTransfer', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'registerAsset', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'validAssets', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifier', data: BytesLike): Result;
  }

  
    export namespace AssetRegisteredEvent {
      export type InputTuple = [assetId: BigNumberish];
      export type OutputTuple = [assetId: bigint];
      export interface OutputObject {assetId: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BalanceCommitmentUpdatedEvent {
      export type InputTuple = [user: AddressLike, newCommitment: BigNumberish];
      export type OutputTuple = [user: string, newCommitment: bigint];
      export interface OutputObject {user: string, newCommitment: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace TransferExecutedEvent {
      export type InputTuple = [from: AddressLike, to: AddressLike, timestamp: BigNumberish];
      export type OutputTuple = [from: string, to: string, timestamp: bigint];
      export interface OutputObject {from: string, to: string, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface PrivateTransfer extends BaseContract {
    
    connect(runner?: ContractRunner | null): PrivateTransfer;
    waitForDeployment(): Promise<this>;

    interface: PrivateTransferInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    balanceCommitments: TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    getBalanceCommitment: TypedContractMethod<
      [user: AddressLike, ],
      [bigint],
      'view'
    >
    

    
    initializeBalance: TypedContractMethod<
      [commitment: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    isValidAsset: TypedContractMethod<
      [assetId: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    privateTransfer: TypedContractMethod<
      [pA: [BigNumberish, BigNumberish], pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]], pC: [BigNumberish, BigNumberish], pubSignals: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], recipient: AddressLike, ],
      [boolean],
      'nonpayable'
    >
    

    
    registerAsset: TypedContractMethod<
      [assetId: BigNumberish, ],
      [void],
      'nonpayable'
    >
    

    
    validAssets: TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >
    

    
    verifier: TypedContractMethod<
      [],
      [string],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'balanceCommitments'): TypedContractMethod<
      [arg0: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'getBalanceCommitment'): TypedContractMethod<
      [user: AddressLike, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'initializeBalance'): TypedContractMethod<
      [commitment: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'isValidAsset'): TypedContractMethod<
      [assetId: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'privateTransfer'): TypedContractMethod<
      [pA: [BigNumberish, BigNumberish], pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]], pC: [BigNumberish, BigNumberish], pubSignals: [BigNumberish, BigNumberish, BigNumberish, BigNumberish], recipient: AddressLike, ],
      [boolean],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'registerAsset'): TypedContractMethod<
      [assetId: BigNumberish, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'validAssets'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'verifier'): TypedContractMethod<
      [],
      [string],
      'view'
    >;

    getEvent(key: 'AssetRegistered'): TypedContractEvent<AssetRegisteredEvent.InputTuple, AssetRegisteredEvent.OutputTuple, AssetRegisteredEvent.OutputObject>;
getEvent(key: 'BalanceCommitmentUpdated'): TypedContractEvent<BalanceCommitmentUpdatedEvent.InputTuple, BalanceCommitmentUpdatedEvent.OutputTuple, BalanceCommitmentUpdatedEvent.OutputObject>;
getEvent(key: 'TransferExecuted'): TypedContractEvent<TransferExecutedEvent.InputTuple, TransferExecutedEvent.OutputTuple, TransferExecutedEvent.OutputObject>;

    filters: {
      
      'AssetRegistered(uint256)': TypedContractEvent<AssetRegisteredEvent.InputTuple, AssetRegisteredEvent.OutputTuple, AssetRegisteredEvent.OutputObject>;
      AssetRegistered: TypedContractEvent<AssetRegisteredEvent.InputTuple, AssetRegisteredEvent.OutputTuple, AssetRegisteredEvent.OutputObject>;
    

      'BalanceCommitmentUpdated(address,uint256)': TypedContractEvent<BalanceCommitmentUpdatedEvent.InputTuple, BalanceCommitmentUpdatedEvent.OutputTuple, BalanceCommitmentUpdatedEvent.OutputObject>;
      BalanceCommitmentUpdated: TypedContractEvent<BalanceCommitmentUpdatedEvent.InputTuple, BalanceCommitmentUpdatedEvent.OutputTuple, BalanceCommitmentUpdatedEvent.OutputObject>;
    

      'TransferExecuted(address,address,uint256)': TypedContractEvent<TransferExecutedEvent.InputTuple, TransferExecutedEvent.OutputTuple, TransferExecutedEvent.OutputObject>;
      TransferExecuted: TypedContractEvent<TransferExecutedEvent.InputTuple, TransferExecutedEvent.OutputTuple, TransferExecutedEvent.OutputObject>;
    
    };
  }