/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */


import { ethers } from 'ethers'
import { DeployContractOptions, FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from "./index.js";

declare module "@nomicfoundation/hardhat-ethers/types" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
  getContractFactory(name: 'Counter', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.Counter__factory>
getContractFactory(name: 'Groth16Verifier', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.Groth16Verifier__factory>
getContractFactory(name: 'Groth16Verifier', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.Groth16Verifier__factory>
getContractFactory(name: 'Migrations', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.Migrations__factory>
getContractFactory(name: 'IVerifier', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.IVerifier__factory>
getContractFactory(name: 'PrivateTransfer', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.PrivateTransfer__factory>
getContractFactory(name: 'Groth16Verifier', signerOrOptions?: ethers.Signer | FactoryOptions): Promise<Contracts.Groth16Verifier__factory>

  getContractAt(name: 'Counter', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.Counter>
getContractAt(name: 'Groth16Verifier', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.Groth16Verifier>
getContractAt(name: 'Groth16Verifier', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.Groth16Verifier>
getContractAt(name: 'Migrations', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.Migrations>
getContractAt(name: 'IVerifier', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.IVerifier>
getContractAt(name: 'PrivateTransfer', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.PrivateTransfer>
getContractAt(name: 'Groth16Verifier', address: string | ethers.Addressable, signer?: ethers.Signer): Promise<Contracts.Groth16Verifier>

  deployContract(name: 'Counter', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Counter>
deployContract(name: 'Groth16Verifier', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Groth16Verifier>
deployContract(name: 'Groth16Verifier', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Groth16Verifier>
deployContract(name: 'Migrations', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Migrations>
deployContract(name: 'IVerifier', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IVerifier>
deployContract(name: 'PrivateTransfer', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PrivateTransfer>
deployContract(name: 'Groth16Verifier', signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Groth16Verifier>

  deployContract(name: 'Counter', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Counter>
deployContract(name: 'Groth16Verifier', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Groth16Verifier>
deployContract(name: 'Groth16Verifier', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Groth16Verifier>
deployContract(name: 'Migrations', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Migrations>
deployContract(name: 'IVerifier', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.IVerifier>
deployContract(name: 'PrivateTransfer', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.PrivateTransfer>
deployContract(name: 'Groth16Verifier', args: any[], signerOrOptions?: ethers.Signer | DeployContractOptions): Promise<Contracts.Groth16Verifier>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
  